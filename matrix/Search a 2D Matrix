Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
Example 2:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        if(matrix.length==0) return false;
        int row =matrix.length;
        int col = matrix[0].length;
        int left  = 0;
        int right = row*col-1;
        
        while(left<=right){
            int mid = left+(right-left)/2;
            int midelement = matrix[mid/col][mid%col];
            if(midelement==target){
                return true;
            }else if(target>midelement){
                left = mid+1;
            }else if(target<midelement){
                right = mid-1;
            }
        }
        return false;
        
    }
}
