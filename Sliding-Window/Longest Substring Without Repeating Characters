Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
             
 Solution:
 
 class Solution {
    public int lengthOfLongestSubstring(String s) {
       int start = 0;
        int end =0;
        int counter =0;
        int max =0;
        Map<Character,Integer> map = new HashMap<>();
        while(end<s.length()){
            map.put(s.charAt(end),map.getOrDefault(s.charAt(end),0)+1);
            if(map.get(s.charAt(end))>1) counter++;
            end++;
            while(counter>0){
                char ch = s.charAt(start);
              if(map.get(ch)>1) counter--;
                map.put(ch,map.get(ch)-1);
                start++;
            }
            max = Math.max(max,end-start);
        }
        
        return max;
       
    }
}
