Given an array A of positive integers, call a (contiguous, not necessarily distinct) subarray of A good if the number of different integers in that subarray is exactly K.

(For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.)

Return the number of good subarrays of A.

 

Example 1:

Input: A = [1,2,1,2,3], K = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].
Example 2:

Input: A = [1,2,1,3,4], K = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].
 

Note:

1 <= A.length <= 20000
1 <= A[i] <= A.length
1 <= K <= A.length

Solution:

class Solution {
    public int subarraysWithKDistinct(int[] A, int K) {
        return drx(A,K)-drx(A,K-1);
    }
    public int drx(int[]a ,int k){
        int res =0;
        int i=0;
        Map<Integer,Integer> map = new HashMap<>();
        for(int j =0;j<a.length;j++){
            if(map.getOrDefault(a[j],0)==0) 
                k--;
            map.put(a[j],map.getOrDefault(a[j],0)+1);
            while(k<0){
                map.put(a[i],map.get(a[i])-1);
                if(map.get(a[i])==0)
                    k++;
                i++;
            }
            res+=j-i+1;
        }return res;
    }
}
