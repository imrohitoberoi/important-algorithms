 Binary Tree Postorder Traversal
 
 Given a binary tree, return the postorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [3,2,1]

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList();
        postorder(root,list);
        return list;
    }
    public void postorder(TreeNode root, List<Integer> list){
        if(root!=null){
           
                postorder(root.right,list);
            
          
                postorder(root.left,list);
            
            list.add(root.val);
        }
    }
}
----------------------------------------ot------------------------------

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList();
     Stack<TreeNode> stack = new Stack();
        if(root == null) return list;
    
        stack.push(root);
        while(!stack.isEmpty()){
             TreeNode curr = stack.pop();
               list.add(0,curr.val);
            if(curr.left!=null){
                
                stack.push(curr.left);
                
            }
             if(curr.right!=null){
                
                stack.push(curr.right);
            }

        }
        return list;
    }
}
