list.set--------------------------------------------------------------------------------------------------------------
ArrayList<Integer> arraylist = new ArrayList<Integer>();
    arraylist.add(1);
    arraylist.add(2);
    arraylist.add(3);
    
    //Updating 1st element
    arraylist.set(0, 11);
    //Updating 2nd element
    arraylist.set(1, 22);
    //Updating 3rd element


lowerbound and upperbound---------------------------------------------------------------------------------------
public static long lower(long arr[],long key){
        int low = 0;
        int high = arr.length-1;
        while(low < high){
            int mid = low + (high - low)/2;
            if(arr[mid] >= key){
                high = mid;
            }
            else{
                low = mid+1;
            }
        }
        return low;
    }
public static int upper(int arr[],int key){
    int low = 0;
    int high = arr.length-1;
    while(low < high){
        int mid = low + (high - low+1)/2;
        if(arr[mid] <= key){
            low = mid;
        }
        else{
            high = mid-1;
        }
    }
    return low;
}







..........................new.....................................................................................

for(int n: nums){
            map.put(n, map.getOrDefault(n,0)+1);
        }
        
        
could be replaced by

Arrays.stream(nums).forEach(e->map.put(e, map.getOrDefault(e, 0)) + 1)
////////////////////////////////////////////////////////////////////////////////////////////////////
if(!freqMap.containsKey(freq)){
               freqMap.put(freq, new LinkedList<>());
           }
by

freqMap.putIfAbsent(freq, new LinkedList<>());







..........................new.....................................................................................

2<<=1; == 2*2;
2<<=2; == 2*4;






..........................new.....................................................................................
list to integers to array of integers

int[] array = list.stream().mapToInt(i->i).toArray();





.........................new.....................................................................................

char array to string
char[] data = new char[size];
String text = String.copyValueOf(data);

or

String text = String.valueOf(data);

is arguably better (encapsulates the new String call).


.........................new.....................................................................................

int[] a = new int[]{1,2,3,4,5};
int[] b = a.clone();

int[] a = new int[5]{1,2,3,4,5};
int[] b = Arrays.copyOf(a, a.length);

String []line = br.readLine().split(" ");

end-----------------------------------------------------------------------------------------------------------
